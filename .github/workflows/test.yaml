name: lint test and deploy
on: push 
jobs: 
  test:
    runs-on: ubuntu-latest 
    steps:
      - name: get code
        uses: actions/checkout@v3 
      - name: cache dependencies
        uses: actions/cache@v4 
        with:
          path: ~/.npm # point at the files and folders that will be cached
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }} # used for retrieving cache in future, used for recreating dependencies on runner machine 
      - name: install dependencies 
        run: npm ci
      - name: lint code 
        run: npm run lint 
      - name: test code
        run: npm run test 
  build: 
    needs: test 
    runs-on: ubuntu-latest 
    outputs:
      script-file: ${{ steps.publish.outputs.output-file }} # up to you, what you use to access the actual output 
    steps:
      - name: get code
        uses: actions/checkout@v3 
      - name: cache dependencies
        uses: actions/cache@v4 
        with:
          path: ~/.npm 
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: install dependencies 
        run: npm ci
      - name: build code
        run: npm run build 
      - name: publish js filename 
        id: publish 
        run: find dist/assets/*.js -type f -execdir echo 'output-file={}' >> $GITHUB_OUTPUT ';'
      - name: upload artifacts 
        uses: actions/upload-artifact@v4
        with:
          name: dist-files # artifact name useful for retrieving them 
          path: dist 
          # path: | # where to find the artifacts
          #   dist 
          #   package.json 
  deploy: 
    needs: build
    runs-on: ubuntu-latest 
    steps:
      - name: get build artifacts 
        uses: actions/download-artifact@v4 
        with:
          name: dist-files #use same name as from the upload artifacts step 
      - name: output content 
        run: ls # should show all contents of the dist folder from previous job 
      - name: output file name
        run: echo "${{ needs.build.outputs.script-file }}" # use the output from the build job 
      - name: deploy 
        run: echo "deploying ..."
        